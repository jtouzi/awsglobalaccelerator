---
AWSTemplateFormatVersion: '2010-09-09'
Description: 're:Invent 2019 - Builders Session NET202: Using AWS Global Accelerator
  for multi-region applications. This CloudFormation template creates 2 EC2 instances
  in 2 different AZs in the region, an auto-scaling group and place them behind an
  Application Load Balancer with a simple health check.'
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be a list of at least two existing subnets associated
      with at least two different availability zones. They should be residing in the
      selected Virtual Private Cloud.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t3.micro
    - t3.small
    - t3.medium
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: can contain only ASCII characters.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    'eu-north-1':
      AMI: 'ami-0c947472aff72870d'
    'ap-south-1':
      AMI: 'ami-040c7ad0a93be494e'
    'eu-west-3':
      AMI: 'ami-05a51ff00c1d77571'
    'eu-west-2':
      AMI: 'ami-00e8b55a2e841be44'
    'eu-west-1':
      AMI: 'ami-040ba9174949f6de4'
    'ap-northeast-2':
      AMI: 'ami-02b3330196502d247'
    'me-south-1':
      AMI: 'ami-0207e6a966ca96048'
    'ap-northeast-1':
      AMI: 'ami-0064e711cbc7a825e'
    'sa-east-1':
      AMI: 'ami-053f8b6627112b46e'
    'ca-central-1':
      AMI: 'ami-007dbcbce3118978b'
    'ap-east-1':
      AMI: 'ami-ff4d378e'
    'ap-southeast-1':
      AMI: 'ami-00942d7cd4f3ca5c0'
    'ap-southeast-2':
      AMI: 'ami-08a74056dfd30c986'
    'eu-central-1':
      AMI: 'ami-0f3a43fbf2d3899f7'
    'us-east-1':
      AMI: 'ami-00dc79254d0461090'
    'us-east-2':
      AMI: 'ami-00bf61217e296b409'
    'us-west-1':
      AMI: 'ami-024c80694b5b3e51a'
    'us-west-2':
      AMI: 'ami-0a85857bfc5345c38'
Resources:
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs: [!Ref ALBTargetGroup]
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Download PHP file from S3
      AWS::CloudFormation::Init:
        config:
          files:
            "/var/www/html/index.php":
              source: https://s3.amazonaws.com/jtouzi/logs/index.php
              mode: '000644'
              owner: ec2-user
              group: apache
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      SecurityGroups: [!Ref InstanceSecurityGroup]
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          yum install -y httpd mariadb-server
          systemctl start httpd
          systemctl enable httpd
          usermod -a -G apache ec2-user
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          echo "<?php phpinfo(); ?>" > /var/www/html/phpinfo.php
          wget -P /var/www/html/ https://s3.amazonaws.com/jtouzi/logs/index.php
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --configsets full_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WebServerGroup --region ${AWS::Region}
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref Subnets
      SecurityGroups: [!Ref ALBSecurityGroup]
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      -
        Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the configured port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref SSHLocation
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/S access on the Application Load Balancer
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
Outputs:
  URL:
    Description: URL of the website
    Value: !Join ['', ['http://', !GetAtt [ApplicationLoadBalancer, DNSName]]]
